#!/bin/bash
# Burke Azbill
# Date: 2019-07-05
# Purpose: This script will process and display a summary from the
#          SDDCS_INFO.json file generated by the get-vmc-sddcs-json.sh script
#
# Tags: jq process array
# Helpful URL: https://starkandwayne.com/blog/bash-for-loop-over-json-array-using-jq/
source ../utils/common_functions.sh
# From common_functions.sh
check-jq

# Provide Help and option to specify a file to process:
if [ ${#} -lt 1 ]; then
  echo -e "Usage: \n  $0 [SDDCNAME] [INFILE]"
  exit 1
else
  SDDCNAME=$1
  if [ -n "$2" ]; then
    INFILE=$2
  else
    INFILE="SDDCS_INFO.json"
  fi

  if test -f "${INFILE}"; then
    echo "Input file set to: "${INFILE}
  else
    echo "The specified file: ${INFILE} not found"
    exit 1
  fi
fi

#for row in $(cat ${INFILE} | jq --arg INNAME "${SDDCNAME}." -r '.[] | select(.name|test($INNAME)) | @base64'); do
# The line above does the same thing as the one below, just uses a different approach
# The line below processes a json file that contains an array, only entries
#    that the .name property starts with ${SDDCNAME} are processed. The "i" 
#    tells the test to ignore case. It then outputs specific field values into space delimited rows
#    and dumps that into a txt file for further processing
cat SDDCS_INFO.json | jq -r '.[] | select(.name | test("'${SDDCNAME}.'"; "i")) | "\(.id) Created:\(.created) Provider:\(.provider) Owner:\(.user_name) \(.name)"' > sddcs-summary.txt
printf "\n\033[1;31mWARNING ! ! The following SDDCs will be deleted if you proceed\033[0m\n" 
cat sddcs-summary.txt | cut -d" " -f2-5
echo ""
read -p "Are you sure? " -n 1 -r
echo    # (optional) move to a new line
if [[ $REPLY =~ ^[Yy]$ ]]
then
    # do dangerous stuff
    while read line; do
      SDDCNAME=$(echo $line | cut -d" " -f5)
      SDDCID=$(echo $line | cut -d" " -f1)
      echo "Deleting SDDC ${SDDCNAME} - ID: ${SDDCID}...."
      #TASKFILE=${SDDCFULLNAME}-delete-task.json
      #curl -s -X DELETE https://vmc.vmware.com/vmc/api/orgs/${ORGID}/sddcs/${SDDCID} -H 'Content-Type: application/json' -H "csp-auth-token: ${CSP_ACCESS_TOKEN}" -o ${TASKFILE}
      sleep 3
    done < sddcs-summary.txt
else
  echo "Operation aborted."
fi

# From common-functions.sh
displayElapsedScriptTime
